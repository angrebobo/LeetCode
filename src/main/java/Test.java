public class Test {
    /**
     * 16进制直接转换成为字符串(无需Unicode解码)
     * @param hexStr  Byte字符串(Byte之间无分隔符
     * @author xxs
     * @return 对应的字符串
     */
    public static String hexStr2Str(String hexStr) {
        String str = "0123456789ABCDEF"; //16进制能用到的所有字符 0-15
        char[] hexs = hexStr.toCharArray();//toCharArray() 方法将字符串转换为字符数组。
        int length = (hexStr.length() / 2);//1个byte数值 -> 两个16进制字符
        byte[] bytes = new byte[length];
        int n;
        for (int i = 0; i < bytes.length; i++) {
            int position = i * 2;//两个16进制字符 -> 1个byte数值
            n = str.indexOf(hexs[position]) * 16;
            n += str.indexOf(hexs[position + 1]);
            // 保持二进制补码的一致性 因为byte类型字符是8bit的  而int为32bit 会自动补齐高位1  所以与上0xFF之后可以保持高位一致性
            //当byte要转化为int的时候，高的24位必然会补1，这样，其二进制补码其实已经不一致了，&0xff可以将高的24位置为0，低8位保持原样，这样做的目的就是为了保证二进制数据的一致性。
            bytes[i] = (byte) (n & 0xff);
        }
        return new String(bytes);
    }

    public static void main(String[] args) {

        String str = "7B 22 61 6E 64 72 6F 69 64 56 65 72 73 69 6F 6E 22 3A 22 31 31 22 2C 22 61 70 70 56 65 72 73 69 6F 6E 22 3A 22 38 2E 35 2E 30 64 65 76 5F 65 78 70 74 22 2C 22 63 61 74 65 67 6F 72 79 22 3A 22 30 37 35 42 43 45 35 38 30 33 33 30 34 39 42 30 41 38 39 45 44 36 37 36 46 30 38 34 34 39 43 36 61 62 64 36 32 39 63 30 63 36 62 31 64 65 31 66 30 33 33 34 64 36 39 63 63 31 30 66 64 62 36 65 22 2C 22 63 68 61 6E 6E 65 6C 22 3A 22 22 2C 22 63 6C 69 65 6E 74 49 70 22 3A 22 31 30 33 2E 32 32 36 2E 32 33 32 2E 31 36 38 22 2C 22 63 6C 69 65 6E 74 54 69 6D 65 22 3A 22 31 37 31 32 35 30 30 35 32 31 31 36 39 22 2C 22 63 6F 75 6E 74 22 3A 22 30 22 2C 22 64 61 74 61 54 79 70 65 22 3A 22 73 68 6F 77 2D 66 69 6C 74 65 72 2D 61 64 22 2C 22 65 76 65 6E 74 4D 61 70 22 3A 7B 22 64 75 69 64 22 3A 22 41 44 31 45 31 32 33 42 37 34 46 42 34 43 35 35 39 45 32 36 46 38 34 36 30 33 30 39 38 36 45 34 45 43 37 44 34 32 34 39 37 39 43 43 39 43 35 31 43 43 37 36 37 39 33 39 41 45 39 36 35 39 34 43 22 2C 22 62 69 7A 54 79 70 65 22 3A 22 42 49 5A 5F 54 59 50 45 5F 4F 56 45 52 53 45 41 53 5F 4D 49 58 22 2C 22 6F 72 69 67 69 6E 61 6C 50 6F 73 49 64 22 3A 22 35 38 31 30 36 5F 38 39 35 31 35 5F 38 39 35 31 37 5F 38 39 35 32 30 22 2C 22 6D 69 78 43 6F 73 74 22 3A 22 30 22 2C 22 66 69 6C 74 65 72 4E 61 6D 65 22 3A 22 4F 76 65 72 73 65 61 73 41 70 70 49 6E 73 74 61 6C 6C 65 64 46 69 6C 74 65 72 22 2C 22 64 73 70 49 64 22 3A 22 33 30 31 38 22 2C 22 66 69 6C 74 65 72 4C 65 76 65 6C 22 3A 22 6D 69 78 65 72 22 2C 22 72 65 71 49 64 22 3A 22 22 2C 22 70 6F 73 49 64 22 3A 22 38 39 35 32 30 22 2C 22 61 64 49 64 22 3A 22 6F 6E 6C 69 6E 65 5F 33 30 31 38 5F 31 36 64 34 66 38 35 37 32 32 34 35 66 36 30 38 38 62 33 34 34 37 65 32 34 30 32 34 62 63 33 32 38 36 35 32 35 37 63 64 61 65 61 64 66 31 63 64 35 35 35 36 66 61 34 65 39 61 35 33 37 33 33 36 22 2C 22 65 78 70 49 64 73 22 3A 22 33 34 37 33 32 22 2C 22 70 61 67 65 4E 6F 22 3A 22 31 22 2C 22 61 70 70 49 64 22 3A 22 31 32 30 33 32 31 32 39 22 2C 22 72 65 71 54 79 70 65 22 3A 22 22 2C 22 69 6E 6E 65 72 52 65 71 49 64 22 3A 22 64 32 31 62 33 30 35 33 66 39 36 39 34 62 34 64 63 35 39 64 66 33 62 30 37 32 64 61 38 34 39 66 22 2C 22 72 65 67 69 6F 6E 22 3A 22 49 4E 22 2C 22 62 72 61 6E 64 22 3A 22 4F 50 50 4F 22 2C 22 61 6C 67 49 64 22 3A 22 22 7D 2C 22 65 76 65 6E 74 56 61 6C 75 65 22 3A 22 22 2C 22 69 6D 65 69 22 3A 22 22 2C 22 6D 6F 64 65 6C 22 3A 22 52 4D 58 32 30 30 31 22 2C 22 6E 65 74 77 6F 72 6B 49 64 22 3A 22 57 49 46 49 22 2C 22 6F 73 56 65 72 73 69 6F 6E 22 3A 22 31 39 22 2C 22 72 6F 6D 56 65 72 73 69 6F 6E 22 3A 22 52 4D 58 32 30 30 31 5F 31 31 5F 43 2E 31 36 22 2C 22 73 64 6B 56 65 72 73 69 6F 6E 22 3A 22 32 2E 31 2E 34 22 2C 22 73 65 71 49 64 22 3A 22 41 44 31 45 31 32 33 42 37 34 46 42 34 43 35 35 39 45 32 36 46 38 34 36 30 33 30 39 38 36 45 34 45 43 37 44 34 32 34 39 37 39 43 43 39 43 35 31 43 43 37 36 37 39 33 39 41 45 39 36 35 39 34 43 22 2C 22 73 65 72 76 65 72 54 69 6D 65 22 3A 22 31 37 31 32 35 30 30 35 32 31 31 36 39 22 2C 22 73 65 73 73 69 6F 6E 49 64 22 3A 22 22 2C 22 73 73 6F 69 64 22 3A 22 35 63 36 64 36 32 62 38 39 32 64 38 31 32 62 38 35 33 62 62 66 39 34 39 37 62 35 61 35 34 64 65 33 32 62 38 34 61 39 64 37 39 35 37 32 62 65 62 66 31 39 62 38 36 39 38 61 64 34 33 31 65 63 35 22 2C 22 73 79 73 74 65 6D 49 64 22 3A 22 22 7D";
        str = str.replaceAll(" ", "");
        String s = hexStr2Str(str);
        System.out.println(s);
    }
}
